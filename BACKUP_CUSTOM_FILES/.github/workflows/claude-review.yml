name: Claude Code Review (Read-Only)

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]

jobs:
  claude-review:
    # Only trigger on @claude-review command from authorized users
    if: |
      (
        github.event_name == 'issue_comment' ||
        github.event_name == 'pull_request_review_comment'
      ) &&
      contains(github.event.comment.body, '@claude-review') &&
      contains(fromJSON('["Wirasm", "coleam00", "sean-eskerium"]'), github.event.comment.user.login)

    runs-on: ubuntu-latest

    permissions:
      contents: read # Read-only access
      pull-requests: write # Allow comments on PRs
      issues: write # Allow comments on issues
      actions: read # Read CI results
      id-token: write # Required for OIDC authentication

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better context

      - name: Run Claude Code Review
        id: claude
        uses: anthropics/claude-code-action@beta
        timeout-minutes: 15
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Custom trigger phrase for review
          trigger_phrase: "@claude-review"

          # Review-specific instructions
          custom_instructions: |
            You are performing a CODE REVIEW ONLY. You cannot make any changes to files.

            ## Your Role
            You are reviewing code for Archon V2 Alpha, a local-first AI knowledge management system.

            ## Review Focus Areas
            1. **Code Quality**: Identify potential bugs, performance issues, and code smells
            2. **Security**: Check for security vulnerabilities and data exposure risks
            3. **Best Practices**: Ensure code follows project conventions and patterns
            4. **Documentation**: Verify adequate comments and documentation
            5. **Testing**: Suggest missing tests or test improvements

            ## Architecture Context
            - Frontend: React + TypeScript + Vite (port 3737)
            - Backend: FastAPI + Socket.IO + Python (port 8181)
            - MCP Service: MCP protocol server (port 8051)
            - Agents Service: PydanticAI agents (port 8052)
            - Database: Supabase (PostgreSQL + pgvector)

            ## Review Guidelines
            - Be constructive and specific in feedback
            - Suggest improvements with code examples
            - Highlight both issues and good practices
            - Consider the alpha development principles (fail fast, detailed errors)
            - Reference CLAUDE.md for project standards

            ## Output Format
            Provide your review as a structured comment with:
            - üéØ **Summary**: Brief overview of the changes
            - ‚úÖ **Strengths**: What's done well
            - ‚ö†Ô∏è **Issues**: Problems that need addressing
            - üí° **Suggestions**: Improvements and recommendations
            - üîí **Security**: Any security concerns

          # Allows running tests, linters, and analysis tools while preventing file modifications
          allowed_tools: "Read(*),Grep(*),LS(*),Glob(*),Bash(npm test*),Bash(npm run test*),Bash(npm run lint*),Bash(npm run type*),Bash(npm run check*),Bash(uv run pytest*),Bash(uv run ruff*),Bash(uv run mypy*),Bash(git log*),Bash(git diff*),Bash(git status*),Bash(git show*),Bash(cat *),Bash(head *),Bash(tail *),Bash(wc *),Bash(find * -type f),WebSearch(*),TodoWrite(*)"

  unauthorized-message:
    # Post message for unauthorized users
    if: |
      (
        github.event_name == 'issue_comment' ||
        github.event_name == 'pull_request_review_comment'
      ) &&
      contains(github.event.comment.body, '@claude-review') &&
      !contains(fromJSON('["Wirasm", "coleam00", "sean-eskerium"]'), github.event.comment.user.login)

    runs-on: ubuntu-latest

    permissions:
      issues: write
      pull-requests: write

    steps:
      - name: Post unauthorized message
        uses: actions/github-script@v7
        with:
          script: |
            const comment = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚ùå @${context.actor} - You are not authorized to trigger Claude reviews.\n\nOnly the following users can trigger Claude:\n- @Wirasm\n- @coleam00\n- @sean-eskerium\n\nPlease ask a maintainer for review.`
            };

            if (context.eventName === 'issue_comment') {
              await github.rest.issues.createComment({
                ...comment,
                issue_number: context.issue.number
              });
            } else if (context.eventName === 'pull_request_review_comment') {
              await github.rest.pulls.createReplyForReviewComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                comment_id: context.payload.comment.id,
                body: comment.body
              });
            }
